const { BackOption, CourseOptions, InstituteOptions_1, InstituteOptions_2,
   IKTA_1_Speciality, IKTA_2_Speciality, KI_1_Options, KI_2_Options, } = require('./options');
const { AnnouncementModel, UserModel } = require('./models/models.js');
const fs = require('fs');
const options = require('./options');
const userSteps = {};

const textForHalyava = '–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É, —â–æ —Ñ–∞–π–ª–∏ –º–∞—é—Ç—å –ø—Ä–∞–≤–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –±—É–¥—å-—è–∫—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ(–Ω–µ –≤—Å–µ –º–æ–∂–µ –±—É—Ç–∏ —è–∫—ñ—Å–Ω–µ)üôÉ                                                    –Ø–∫—â–æ –º–∞—î—Ç–µ –±–∞–∂–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —â–æ—Å—å - –ø–∏—Å–∞—Ç–∏ @lil_chicha_l';

const mainMenuText = '                                *–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é*                                \n–ú–µ–Ω—é –±—É–¥–µ –¥–æ–ø–æ–≤–Ω—é–≤–∞—Ç–∏—Å—å';

const mainMenuKeyboard = {
   reply_markup: {
      inline_keyboard: [
         [{ text: 'üîé–®–≤–∏–¥–∫–∏–π –ø–æ—à—É–∫', callback_data: 'find_menu' }, { text: 'üìÖ–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è', callback_data: 'last_update' },],
         [{ text: 'üìß–ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –ø–æ—à—Ç–∏ –ü–æ–ª—ñ—Ç–µ—Ö–Ω—ñ–∫–∏', callback_data: 'mail_opportunities' },]
      ],
   },
   noChunking: true,
};

const callbacks = {
   'main_menu': async (chatId) => {
      const text = mainMenuText;
      return { text: text, options: mainMenuKeyboard, chatId };
   },

   'find_menu': async (chatId) => {

      const courseNumber = await getCourseNumber(chatId);
      switch (courseNumber) {
         case 1:
            return { text: 'üìñ–í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—Å—Ç–∏—Ç—É—Ç', options: InstituteOptions_1, chatId };
         case 2:
            return { text: 'üìñ–í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—Å—Ç–∏—Ç—É—Ç', options: InstituteOptions_2, chatId };
         case 3:
            return { text: 'üìñ–í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—Å—Ç–∏—Ç—É—Ç', options: InstituteOptions_3, chatId };
      }
   },

   'last_update': async (chatId) => {
      const filePath = 'C:/#thcbot/nulpBot/nulpbot/text_files/last_update.txt';
      const options = {
         noChunking: true,
         reply_markup: {
            inline_keyboard: [
               [{ text: 'üîô–ù–∞–∑–∞–¥', callback_data: 'main_menu' }],
            ]
         }
      };
      const text = readTextFromFile(filePath);
      return { text, options, chatId };
   },

   'mail_opportunities': async (chatId) => {
      const filePath = 'C:/#thcbot/nulpBot/nulpbot/text_files/mail_opportunities.txt';
      const options = {
         parse_mode: "Markdown",
         noChunking: true,
         reply_markup: {
            inline_keyboard: [
               [{ text: 'üîô–ù–∞–∑–∞–¥', callback_data: 'main_menu' }],
            ]
         }
      };
      let text = readTextFromFile(filePath);

      // –ó–∞–º—ñ–Ω—é—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç Markdown
      text = text.replace(/GitHub Students Pack/g, '[GitHub Students Pack](https://education.github.com/pack)');
      text = text.replace(/Google Drive Unlimited/g, '[Google Drive Unlimited](https://www.google.com/drive/)');
      text = text.replace(/JetBrains All-In-One IDEs Pack/g, '[JetBrains All-In-One IDEs Pack](https://www.jetbrains.com/lp/leaflets-gdc/students/)');

      return { text, options, chatId };
   },


   'IKTA_1': async (chatId) => {
      return { text: 'üë®‚Äçüíª–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å (1 –ö—É—Ä—Å)', options: IKTA_1_Speciality, chatId };
   },

   'IKTA_2': async (chatId) => {
      return { text: 'üë®‚Äçüíª–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å (2 –ö—É—Ä—Å)', options: IKTA_2_Speciality, chatId };
   },

   'IKTA_3': async (chatId) => {
      return { text: 'üë®‚Äçüíª–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å (3 –ö—É—Ä—Å)', options: IKTA_3_Speciality, chatId };
   },

   'KI_1': async (chatId) => {
      return { text: 'üìï–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç:', options: KI_1_Options, chatId };
   },

   'KI_2': async (chatId) => {
      return { text: 'üìï–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç:', options: KI_2_Options, chatId };
   },

   'KI_1_1': async (chatId) => {
      const text = await getAnnouncementText('KI_1_1');
      const options = addButtonToBackOption('–•–∞–ª—è–≤–∞', 'KI_1_1_H');
      return { text, options: options, chatId };
   },

   'KI_1_2': async (chatId) => {
      const text = await getAnnouncementText('KI_1_2');
      const options = { ...BackOption }
      return { text, options, chatId };
   },

   'KI_1_3': async (chatId) => {
      const text = await getAnnouncementText('KI_1_3');
      const options = addButtonToBackOption('–•–∞–ª—è–≤–∞', 'KI_1_3_H');
      return { text, options: options, chatId };
   },

   'KI_1_3_H': async (chatId) => {
      const filePath = 'C:/#thcbot/nulpBot/nulpbot/test_files'; // –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É
      const { lastModifiedMessage } = getLastModifiedTimeAndMessage(filePath); // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–º—ñ–Ω
      const spoiler = `_${lastModifiedMessage}_`

      const text = `${textForHalyava}     ${spoiler}`;
      const options = { ...BackOption, parse_mode: 'Markdown' };

      return { text, options, chatId, folderPath: filePath };
   },


   'KI_123': async (chatId) => {
      const courseNumber = getCourseNumber(chatId);
      switch (courseNumber) {
         case 1:
            return { text: '–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç:', options: KI_1_Options, chatId };
         case 2:
            return { text: '–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç:', options: KI_2_Options, chatId };
         case 3:
            return { text: '–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç:', options: KI_3_Options, chatId };
         case 4:
            return { text: '–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç:', options: KI_4_Options, chatId };
      }
   },

   'KI_2_1': async (chatId) => {
      const text = await getAnnouncementText('KI_2_1');
      return { text, chatId };
   },

   'KI_2_2': async (chatId) => {
      const text = await getAnnouncementText('KI_2_2');
      return { text, chatId };
   },
};

const getCourseNumber = async (userId) => {
   try {
      const user = await UserModel.findOne({ userId });
      return user ? user.course : 1; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ 1, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π
   } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–æ–º–µ—Ä—É –∫—É—Ä—Å—É:', error);
      return 1; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ 1 —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
   }
};

const getAnnouncementText = async (option) => {
   try {
      const announcements = await AnnouncementModel.find({ option, isActive: true });

      if (announcements.length > 0) {
         const texts = announcements.map((announcement) => announcement.properties.text);
         return texts.join('\n'); // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—Å—ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –Ω–æ–≤–∏–º —Ä—è–¥–∫–æ–º
      } else {
         return '–ú–∏ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –æ–≥–æ–ª–æ—à–µ–Ω—å –¥–ª—è —Ü—å–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç—Éüòï';
      }
   } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω—å –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:', error);
      return '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω—å.';
   }
};

const addButtonToBackOption = (text, callback_data) => {
   // –ö–ª–æ–Ω—É—î–º–æ BackOption —É –Ω–æ–≤–∏–π –æ–±'—î–∫—Ç
   const newOptions = JSON.parse(JSON.stringify(BackOption));

   // –û—Ç—Ä–∏–º—É—î–º–æ inline_keyboard –∑ newOptions
   const inlineKeyboard = JSON.parse(newOptions.reply_markup).inline_keyboard || [];

   // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—É –∫–Ω–æ–ø–∫—É
   inlineKeyboard.push([{ text, callback_data }]);

   // –û–Ω–æ–≤–ª—é—î–º–æ newOptions –∑ –Ω–æ–≤–∏–º inline_keyboard
   newOptions.reply_markup = JSON.stringify({ inline_keyboard: inlineKeyboard });

   return newOptions;
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–º—ñ–Ω —Ñ–∞–π–ª—É —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
function getLastModifiedTimeAndMessage(filePath) {
   try {
      const stats = fs.statSync(filePath);
      const lastModifiedTime = stats.mtime; // –î–∞—Ç–∞ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–º—ñ–Ω

      const day = String(lastModifiedTime.getDate()).padStart(2, '0');
      const month = String(lastModifiedTime.getMonth() + 1).padStart(2, '0');
      const year = lastModifiedTime.getFullYear();

      const lastModifiedMessage = `–û—Å—Ç–∞–Ω–Ω—ñ–π —Ä–∞–∑ —Ñ–∞–π–ª–∏ –±—É–ª–æ –¥–æ–¥–∞–Ω–æ: ${day}.${month}.${year}`; // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –¥–∞—Ç–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ "18.03.2024"
      return { lastModifiedTime, lastModifiedMessage };
   } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–º—ñ–Ω:', error);
      return { lastModifiedTime: null, lastModifiedMessage: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–º—ñ–Ω' };
   }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è –≤–º—ñ—Å—Ç—É —Ñ–∞–π–ª—É
function readTextFromFile(filePath) {
   try {
      // –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è –≤–º—ñ—Å—Ç—É —Ñ–∞–π–ª—É –∑ –∫–æ–¥—É–≤–∞–Ω–Ω—è–º utf-8
      const text = fs.readFileSync(filePath, 'utf-8');
      return text;
   } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É:', error);
      return null;
   }
}






module.exports = { callbacks, getCourseNumber, userSteps, getAnnouncementText, mainMenuText, mainMenuKeyboard };
